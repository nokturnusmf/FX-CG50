#include <stdlib.h>
#include <string.h>

template<typename T>
Vector<T>::Vector(int length) : allocated(length), used(0) {
    this->data = static_cast<T*>(malloc(length * sizeof(T)));
}

template<typename T>
Vector<T>::Vector(const T& ref, int count) : Vector(count) {
    this->used = count;
    
    for (int i = 0; i < count; ++i) {
        data[i] = ref;
    }
}

template<typename T>
Vector<T>::~Vector() {
    free(data);
    data = 0;
}

template<typename T>
Vector<T>& Vector<T>::operator=(const Vector<T>& other) {
    if (this->data) {
        free(data);
    }
    
    data = static_cast<T*>(malloc(other.allocated * sizeof(T)));
    for (int i = 0; i < other.used; ++i) {
        this->data[i] = other.data[i];
    }

    this->used = other.used;
    this->allocated = other.allocated;
    
    return *this;
}

template<typename T>
Vector<T>& Vector<T>::operator=(Vector<T>&& other) {
    if (this->data) {
        free(data);
    }
    
    this->data = other.data;
    this->used = other.used;
    this->allocated = other.allocated;
    
    other.data = static_cast<T*>(malloc(DEFAULT_SIZE * sizeof(T)));
    other.used = 0;
    other.allocated = DEFAULT_SIZE;
    
    return *this;
}

template<typename T>
void Vector<T>::clear() {
    this->used = 0;
    // TODO call destructors
}

template<typename T>
void Vector<T>::insert(const T& elem, int pos) {
    if (++used > allocated) {
        this->realloc(allocated *= 2);
    }
    for (int i = used; i > pos; --i) {
        data[i] = data[i - 1];
    }
    data[pos] = elem;
}

template<typename T>
void Vector<T>::erase(int pos) {
    --used;
    for (int i = pos; i < used; ++i) {
        data[i] = data[i + 1];
    }
}

template<typename T>
void Vector<T>::realloc(int length) {
    T* t = static_cast<T*>(malloc(length * sizeof(T)));
    for (int i = 0; i < length && i < used; ++i) {
        t[i] = data[i];
    }
    free(data);
    data = t;
}

